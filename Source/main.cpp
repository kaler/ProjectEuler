//
//  main.cpp
//  ProjectEuler
//
//  Created by Parveen Kaler on 10-11-13.
//  Copyright 2010 Smartful Studios Inc. All rights reserved.
//

#include <iostream>

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
// The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.
int problem1()
{
  int accum = 0;
  int limit = 1000;
  
  for (int i = 3;  i < limit; i += 3)
    accum += i;
  
  for (int i = 5; i < limit; i += 5)
    if (i%3)
      accum += i;
  
  return accum;
}

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// Find the sum of all the even-valued terms in the sequence which do not exceed four million.
int problem2()
{
  int accum = 0;
  int limit = 4000000;
  int f0 = 0;
  int f1 = 1;
  
  while (f1 < limit)
  {
    if (f1%2)
      accum += f1;
    
    int f1prime = f1 + f0;
    int f0prime = f1;
    
    f1 = f1prime;
    f0 = f0prime;
  }
  
  return accum;
}

// The prime factors of 13195 are 5, 7, 13 and 29.
//
// What is the largest prime factor of the number 600851475143 ?
int64_t problem3()
{
  int64_t number = 600851475143;
  int64_t factor = 1;

  int64_t i = 2;
  while (number > 1)
  {
    if (number%i == 0)
    {
      factor = i;
      number = number / i;
    }
    else
      ++i;
  }
  
  return factor;
}

// A palindromic number reads the same both ways. The largest palindrome made from the product of 
// two 2-digit numbers is 9009 = 91 x 99.

// Find the largest palindrome made from the product of two 3-digit numbers.

void reverse(char s[])
{
  for (int i = 0, j = strlen(s)-1; i < j; ++i, --j) 
  {
    char c = s[i];
    s[i] = s[j];
    s[j] = c;
  }
}

void itoa(int n, char s[])
{
  int i = 0;
  do 
  {
    s[i++] = n % 10 + '0';
  } while ((n /= 10) > 0);
  
  s[i] = '\0';
}

int problem4()
{
  int m0 = 999;
  int m1 = 999;
  int end = 100 * 100;
  int product = m0 * m1;
  
  while (product > end)
  {
    char lhs[32];
    char rhs[32];
    itoa(product, lhs);
    strncpy(rhs, lhs, 32);
    reverse(rhs);
    if (strcmp(lhs, rhs) == 0)
    {
      for (int i = 999; i >= 100; --i)
      {
        int remainder = product%i;
        int dividend = product/i;
        if (remainder == 0)
        {
          if (dividend >= 100 && dividend <= 999 )
            return product;
        }
        
        if (dividend > 999)
          break;
      }
    }
    
    --product;
  }
  
  return 0;
}

// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// 
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
int problem5()
{
  int length = 20;
  int sequence[length];
  for (int i = 0, j = length; i < length; ++i, --j)
    sequence[i] = j;

  bool evenlyDivisible = true;
  int n = 0;
  do
  {
    evenlyDivisible = true;
    n += sequence[0];
    
    for (int i = 1; i < length; ++i)
    {
      if (n%sequence[i] != 0)
      {
        evenlyDivisible = false;
        break;
      }
    }
  } while (!evenlyDivisible);
  
  return n;
}

// The sum of the squares of the first ten natural numbers is,
// 
// 1^2 + 2^2 + ... + 10^2 = 385
// The square of the sum of the first ten natural numbers is,
//
// (1 + 2 + ... + 10)^2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers 
// and the square of the sum is 3025  385 = 2640.
//
// Find the difference between the sum of the squares of the first one hundred natural numbers 
// and the square of the sum.
int problem6()
{
  int length = 100;

  int squareSum = 0;
  for (int i = 1; i <= length; ++i)
    squareSum += i*i;
  
  int sumSquare = 0;
  for (int i = 0; i <= length; ++i)
    sumSquare += i;
  
  sumSquare = sumSquare * sumSquare;
  
  return sumSquare - squareSum;
}

int main (int argc, const char * argv[]) 
{
  std::cout << "Problem 1: " << problem1() << "\n"
            << "Problem 2: " << problem2() << "\n"
            << "Problem 3: " << problem3() << "\n"
            << "Problem 4: " << problem4() << "\n"
            << "Problem 5: " << problem5() << "\n"
            << "Problem 6: " << problem6() << "\n";


  return 0;
}

